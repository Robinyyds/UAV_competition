# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rc_msgs/detection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rc_msgs.msg

class detection(genpy.Message):
  _md5sum = "23cb67375d6ff3ac17afa20ebc5a5cd0"
  _type = "rc_msgs/detection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 label
float32 score
float32 x1
float32 y1
float32 x2
float32 y2
point[] contours

================================================================================
MSG: rc_msgs/point
float32 x
float32 y
"""
  __slots__ = ['label','score','x1','y1','x2','y2','contours']
  _slot_types = ['int32','float32','float32','float32','float32','float32','rc_msgs/point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,score,x1,y1,x2,y2,contours

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = 0
      if self.score is None:
        self.score = 0.
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.contours is None:
        self.contours = []
    else:
      self.label = 0
      self.score = 0.
      self.x1 = 0.
      self.y1 = 0.
      self.x2 = 0.
      self.y2 = 0.
      self.contours = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5f().pack(_x.label, _x.score, _x.x1, _x.y1, _x.x2, _x.y2))
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.label, _x.score, _x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = rc_msgs.msg.point()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contours.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5f().pack(_x.label, _x.score, _x.x1, _x.y1, _x.x2, _x.y2))
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.label, _x.score, _x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = rc_msgs.msg.point()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contours.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_i5f = None
def _get_struct_i5f():
    global _struct_i5f
    if _struct_i5f is None:
        _struct_i5f = struct.Struct("<i5f")
    return _struct_i5f

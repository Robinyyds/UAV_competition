// Generated by gencpp from file rc_msgs/identify_results.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_IDENTIFY_RESULTS_H
#define RC_MSGS_MESSAGE_IDENTIFY_RESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rc_msgs/single_result.h>

namespace rc_msgs
{
template <class ContainerAllocator>
struct identify_results_
{
  typedef identify_results_<ContainerAllocator> Type;

  identify_results_()
    : identify_results()  {
    }
  identify_results_(const ContainerAllocator& _alloc)
    : identify_results(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rc_msgs::single_result_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rc_msgs::single_result_<ContainerAllocator> >::other >  _identify_results_type;
  _identify_results_type identify_results;





  typedef boost::shared_ptr< ::rc_msgs::identify_results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::identify_results_<ContainerAllocator> const> ConstPtr;

}; // struct identify_results_

typedef ::rc_msgs::identify_results_<std::allocator<void> > identify_results;

typedef boost::shared_ptr< ::rc_msgs::identify_results > identify_resultsPtr;
typedef boost::shared_ptr< ::rc_msgs::identify_results const> identify_resultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::identify_results_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::identify_results_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::identify_results_<ContainerAllocator1> & lhs, const ::rc_msgs::identify_results_<ContainerAllocator2> & rhs)
{
  return lhs.identify_results == rhs.identify_results;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::identify_results_<ContainerAllocator1> & lhs, const ::rc_msgs::identify_results_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::identify_results_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::identify_results_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::identify_results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::identify_results_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::identify_results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::identify_results_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::identify_results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3de7d5d8ebf687280f42a5ebab06b487";
  }

  static const char* value(const ::rc_msgs::identify_results_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3de7d5d8ebf68728ULL;
  static const uint64_t static_value2 = 0x0f42a5ebab06b487ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::identify_results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/identify_results";
  }

  static const char* value(const ::rc_msgs::identify_results_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::identify_results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "single_result[] identify_results\n"
"================================================================================\n"
"MSG: rc_msgs/single_result\n"
"string result\n"
"float32 score\n"
"float32 x_coordinate\n"
"float32 y_coordinate\n"
;
  }

  static const char* value(const ::rc_msgs::identify_results_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::identify_results_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.identify_results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct identify_results_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::identify_results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::identify_results_<ContainerAllocator>& v)
  {
    s << indent << "identify_results[]" << std::endl;
    for (size_t i = 0; i < v.identify_results.size(); ++i)
    {
      s << indent << "  identify_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rc_msgs::single_result_<ContainerAllocator> >::stream(s, indent + "    ", v.identify_results[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_IDENTIFY_RESULTS_H

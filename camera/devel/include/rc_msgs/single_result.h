// Generated by gencpp from file rc_msgs/single_result.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_SINGLE_RESULT_H
#define RC_MSGS_MESSAGE_SINGLE_RESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc_msgs
{
template <class ContainerAllocator>
struct single_result_
{
  typedef single_result_<ContainerAllocator> Type;

  single_result_()
    : result()
    , score(0.0)
    , x_coordinate(0.0)
    , y_coordinate(0.0)  {
    }
  single_result_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , score(0.0)
    , x_coordinate(0.0)
    , y_coordinate(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef float _score_type;
  _score_type score;

   typedef float _x_coordinate_type;
  _x_coordinate_type x_coordinate;

   typedef float _y_coordinate_type;
  _y_coordinate_type y_coordinate;





  typedef boost::shared_ptr< ::rc_msgs::single_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::single_result_<ContainerAllocator> const> ConstPtr;

}; // struct single_result_

typedef ::rc_msgs::single_result_<std::allocator<void> > single_result;

typedef boost::shared_ptr< ::rc_msgs::single_result > single_resultPtr;
typedef boost::shared_ptr< ::rc_msgs::single_result const> single_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::single_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::single_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::single_result_<ContainerAllocator1> & lhs, const ::rc_msgs::single_result_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.score == rhs.score &&
    lhs.x_coordinate == rhs.x_coordinate &&
    lhs.y_coordinate == rhs.y_coordinate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::single_result_<ContainerAllocator1> & lhs, const ::rc_msgs::single_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::single_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::single_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::single_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::single_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::single_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::single_result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::single_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5692ad7fe58fdedd8e6a0db2954a66d";
  }

  static const char* value(const ::rc_msgs::single_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5692ad7fe58fdedULL;
  static const uint64_t static_value2 = 0xd8e6a0db2954a66dULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::single_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/single_result";
  }

  static const char* value(const ::rc_msgs::single_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::single_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string result\n"
"float32 score\n"
"float32 x_coordinate\n"
"float32 y_coordinate\n"
;
  }

  static const char* value(const ::rc_msgs::single_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::single_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.score);
      stream.next(m.x_coordinate);
      stream.next(m.y_coordinate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct single_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::single_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::single_result_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "x_coordinate: ";
    Printer<float>::stream(s, indent + "  ", v.x_coordinate);
    s << indent << "y_coordinate: ";
    Printer<float>::stream(s, indent + "  ", v.y_coordinate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_SINGLE_RESULT_H
